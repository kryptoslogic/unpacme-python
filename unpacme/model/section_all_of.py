"""
    UnpacMe

     # Introduction Welcome to the UNPACME API! All the malware unpacking and file analysis features that you are familiar with on the [unpac.me](https://www.unpac.me/) website are available through our API. You can easily integrate our unpacker into your malware analysis pipeline and begin unpacking at scale!   # Authentication The public UNPACME API is publicly available and can be accessed without authentication.  In order to use the private UNPACME API you must sign up for an account with UNPACME. Once you have a valid user account you can view your personal API key in your user profile.   <SecurityDefinitions />  # Response Structure When interacting with the UNPACME API, if the request was correctly handled, a <b>200</b> HTTP status code will be returned. The body of the response will usually be a JSON object (except for file downloads).  ## Response Status Codes  Status Code  | Description | Notes ------------- | ------------- | - 200  | OK | The request was successful 400  | Bad Request | The request was somehow incorrect. This can be caused by missing arguments or arguments with wrong values. 401 | Unauthorized | The supplied credentials, if any, are not sufficient to access the resource 403 | Forbidden | The account does not have enough privileges to make the request. 404 | Not Found | The requested resource is not found 429  | Too Many Requests | The request frequency has exceeded one of the account quotas (minute, daily or monthly). Monthly quotas are reset on the 1st of the month at 00:00 UTC. 500 | Server Error | The server could not return the representation due to an internal server error   ## Error Response  If an error has occurred while handling the request an error status code will be returend along with a JSON error message with the following properties.   Property  | Description ------------- | ------------- Error  | The error type Description  | A more informative message  # Example Clients  The following clients can be used to interact with the UNPACME API directly and are provided as examples. These clients are community projects and are not maintained or developed by UNPACME. UNPACME makes no claim as to the safety of these clients, use at your own risk.    - [UnpacMe Python Client](https://github.com/larsborn/UnpacMeClient) (Python)   - [UnpacMe GO Client](https://github.com/kryptoslogic/unpacme-go) (Golang)   - [UnpacMe Library](https://github.com/R3MRUM/unpacme) (Python)   - [AssemblyLine](https://github.com/CybercentreCanada/assemblyline-service-unpacme) (Automation Service)     <br>   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

import nulltype  # noqa: F401

from unpacme.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)


class SectionAllOf(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    additional_properties_type = None

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'characteristics': (int,),  # noqa: E501
            'entropy': (float,),  # noqa: E501
            'md5': (str,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'name_hex': (str,),  # noqa: E501
            'number_of_linenumbers': (int,),  # noqa: E501
            'number_of_relocations': (int,),  # noqa: E501
            'pointer_to_linenumbers': (int,),  # noqa: E501
            'pointer_to_raw_data': (int,),  # noqa: E501
            'pointer_to_relocations': (int,),  # noqa: E501
            'sha1': (str,),  # noqa: E501
            'sha256': (str,),  # noqa: E501
            'size_of_raw_data': (int,),  # noqa: E501
            'virtual_address': (int,),  # noqa: E501
            'virtual_size': (int,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'characteristics': 'Characteristics',  # noqa: E501
        'entropy': 'Entropy',  # noqa: E501
        'md5': 'MD5',  # noqa: E501
        'name': 'Name',  # noqa: E501
        'name_hex': 'Name_Hex',  # noqa: E501
        'number_of_linenumbers': 'NumberOfLinenumbers',  # noqa: E501
        'number_of_relocations': 'NumberOfRelocations',  # noqa: E501
        'pointer_to_linenumbers': 'PointerToLinenumbers',  # noqa: E501
        'pointer_to_raw_data': 'PointerToRawData',  # noqa: E501
        'pointer_to_relocations': 'PointerToRelocations',  # noqa: E501
        'sha1': 'SHA1',  # noqa: E501
        'sha256': 'SHA256',  # noqa: E501
        'size_of_raw_data': 'SizeOfRawData',  # noqa: E501
        'virtual_address': 'VirtualAddress',  # noqa: E501
        'virtual_size': 'VirtualSize',  # noqa: E501
    }

    _composed_schemas = {}

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, characteristics, entropy, md5, name, name_hex, number_of_linenumbers, number_of_relocations, pointer_to_linenumbers, pointer_to_raw_data, pointer_to_relocations, sha1, sha256, size_of_raw_data, virtual_address, virtual_size, *args, **kwargs):  # noqa: E501
        """SectionAllOf - a model defined in OpenAPI

        Args:
            characteristics (int): Section characteristics
            entropy (float): Section entropy
            md5 (str): MD5 of section data
            name (str): Section name
            name_hex (str): Hex encoded section name
            number_of_linenumbers (int): Number of line numbers
            number_of_relocations (int): Number of relocations
            pointer_to_linenumbers (int): Pointer to line numbers
            pointer_to_raw_data (int): Pointer to raw data
            pointer_to_relocations (int): Pointer to relocations
            sha1 (str): SHA1 of section data
            sha256 (str): SHA256 of section data
            size_of_raw_data (int): Size of raw data
            virtual_address (int): Virtual address of section
            virtual_size (int): Virtual size of section

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.characteristics = characteristics
        self.entropy = entropy
        self.md5 = md5
        self.name = name
        self.name_hex = name_hex
        self.number_of_linenumbers = number_of_linenumbers
        self.number_of_relocations = number_of_relocations
        self.pointer_to_linenumbers = pointer_to_linenumbers
        self.pointer_to_raw_data = pointer_to_raw_data
        self.pointer_to_relocations = pointer_to_relocations
        self.sha1 = sha1
        self.sha256 = sha256
        self.size_of_raw_data = size_of_raw_data
        self.virtual_address = virtual_address
        self.virtual_size = virtual_size
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
